//解法：先將board內所有在word內的元素列出，若word內的元素在board中皆有對應(含數量)，則可以進一步對比是否可以依照word的順序連成一條線，若有元素無法對應，直接返回false
class Solution {
    public boolean exist(char[][] board, String word) {
        List<List<String>> content = new ArrayList<>();
        StringBuilder words = new StringBuilder();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (word.contains(board[i][j] + "")) {
                    String temp = words.toString();
                    if (temp.contains(board[i][j] + "")) {
                        int index = temp.indexOf(board[i][j]);
                        content.get(index).add(i + "" + j);
                    } else {
                        words.append(board[i][j]);
                        List<String> newContent = new ArrayList<>();
                        newContent.add(board[i][j] + "");
                        newContent.add(i + "" + j);
                        content.add(newContent);
                    }
                }
            }
        }
        String compare = words.toString();
        for(int i=0; i<word.length(); i++){
            if(compare.indexOf(word.charAt(i)) == -1){
                return false;}
        }

        for (List<String> strings : content) {
            String temp = strings.get(0);
            int len = strings.size() - 1;
            int count = 0;
            int from = 0;
            while (word.indexOf(temp, from) != -1) {
                count++;
                from = word.indexOf(temp, from) + 1;}
            if (len < count) {
                return false;
            }
        }
        int first = compare.indexOf(word.charAt(0));
        int[] count = new int[1];
        for (int i = 1; i < content.get(first).size(); i++) {
            List<String> road = new ArrayList<>();
            road.add(content.get(first).get(i));
            judge(content, compare, word, road, 1, count);
        }
        return count[0] == 1;
    }

    private void judge(List<List<String>> content,String compare, String word, List<String> road, int index, int[] contains){
        if(road.size() == word.length()){
            contains[0] = 1;
        }
        else if(index < word.length() && contains[0] !=1){
            String tem = word.charAt(index) + "";
            int loc = compare.indexOf(tem);
            for (int i = 1; i < content.get(loc).size(); i++) {
                if (!road.contains(content.get(loc).get(i))) {
                    String last = road.get(road.size() - 1);
                    int preI = last.charAt(0) - 48;
                    int preJ = last.charAt(1) - 48;
                    String cur = content.get(loc).get(i);
                    int curI = cur.charAt(0) - 48;
                    int curJ = cur.charAt(1) - 48;

                    if ((Math.abs(preI - curI) == 1 && preJ == curJ) || (Math.abs(preJ - curJ) == 1 && preI == curI)) {
                        List<String> temp = new ArrayList<>(road);
                        temp.add(content.get(loc).get(i));
                        judge(content, compare, word, temp, index + 1, contains);
                    }


                }
            }
        }
    }

}