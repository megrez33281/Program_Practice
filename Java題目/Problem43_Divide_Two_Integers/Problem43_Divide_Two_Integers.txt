class Solution {
    public int divide(int dividend, int divisor) {
        long ans = 0;
        int sign = 1;
        long first = dividend;
        long sec = divisor;//long型別方便偵測是否超出Integer.MAX_VALUE 和 Integer.MIN_VALUE

        if(first == 0){return 0;}
        else if(first <0 && sec >0){sign = -1; first*=-1;}
        else if(first >0 && sec <0){sign = -1; sec*=-1;}
        else if(first <0 && sec<0){first*=-1; sec*=-1;}

        //以遞進方式除
        while(first >= sec){
            long temp = sec;
            long add = 1;
            for(int i=0; i<32; i++){
                if(temp*2 > first){
                    first -= temp;
                    ans += add;
                    if(ans >= Integer.MAX_VALUE){return sign==1?Integer.MAX_VALUE:Integer.MIN_VALUE;}
                    break;
                }
                else{
                    temp*=2;//在temp大於first前，每次將temp乘二，之後ans要加的add也會隨之乘2
                    add*=2;}
            }

            if(ans*sign == Integer.MAX_VALUE){return Integer.MAX_VALUE;}
            else if(ans*sign == Integer.MIN_VALUE){return Integer.MIN_VALUE;}
        }


        return (int)ans*sign;
    }

}