/**
 Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

 '.' Matches any single character.
 '*' Matches zero or more of the preceding element.
 The matching should cover the entire input string (not partial).
 ex:
 Input:
 s = "aab"
 p = "c*a*b"
 Output: true
 */

package com.company;
import java.lang.String;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;


public class A6_110502018{


    public static void main(String[] args) {

        Solution solution = new Solution();
        Scanner input = new Scanner(System.in);
        String s = input.nextLine();
        String p = input.nextLine();
        System.out.println(solution.isMatch(s,p));
    }


}
class Solution {
    public boolean isMatch(String text, String pattern) {
        //每次分析字串的頭部，後利用回傳substring完成遞迴
        //當pattern 和 text 同時為空才會為true (相當於AND)
        if (pattern.isEmpty()) return text.isEmpty(); //若pattern為空，返回txt的狀態，若txt為空，返回true，若不為空，返回false

        //已知pattern 不為空
        //first_match 決定pattern 和 text 的第0位元是否等同
        boolean first_match = (!text.isEmpty() && (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == '.'));

        //pattern 的長度大於2，且其第1位元為'*'
        if (pattern.length() >= 2 && pattern.charAt(1) == '*'){
            return (isMatch(text, pattern.substring(2)) || (first_match && isMatch(text.substring(1), pattern)));
            //substring(int) 只有一個數字時，代表以此index為起點，到終點取子字串
        }
        else {
            return first_match && isMatch(text.substring(1), pattern.substring(1));
        }
    }
}
